
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 03 13:56:52 CEST 2020
//----------------------------------------------------

package batiste;

import batiste.enode.*;
import batiste.svgnode.*;
import batiste.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 03 13:56:52 CEST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\010\004\000\002\002\004\000\002\016" +
    "\005\000\002\011\002\000\002\011\004\000\002\012\004" +
    "\000\002\012\003\000\002\006\005\000\002\015\012\000" +
    "\002\014\003\000\002\007\002\000\002\007\005\000\002" +
    "\013\010\000\002\013\011\000\002\013\012\000\002\013" +
    "\010\000\002\013\010\000\002\013\011\000\002\013\011" +
    "\000\002\013\013\000\002\013\020\000\002\013\020\000" +
    "\002\013\011\000\002\013\005\000\002\005\002\000\002" +
    "\005\004\000\002\004\002\000\002\004\004\000\002\003" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\002\002\000\002\002\004\000\002\017\003\000" +
    "\002\017\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\011\006\001\002\000\026\002\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\012\ufffe\013\ufffe\016\ufffe\020\ufffe" +
    "\022\ufffe\032\ufffe\001\002\000\004\002\011\001\002\000" +
    "\004\031\007\001\002\000\004\031\010\001\002\000\026" +
    "\002\uffff\005\uffff\006\uffff\007\uffff\012\uffff\013\uffff\016" +
    "\uffff\020\uffff\022\uffff\032\uffff\001\002\000\004\002\000" +
    "\001\002\000\026\002\001\005\021\006\026\007\014\012" +
    "\023\013\025\016\022\020\017\022\015\032\024\001\002" +
    "\000\030\002\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd\013" +
    "\ufffd\015\ufffd\016\ufffd\020\ufffd\022\ufffd\032\ufffd\001\002" +
    "\000\010\025\037\031\034\032\146\001\002\000\004\032" +
    "\136\001\002\000\004\004\135\001\002\000\004\032\127" +
    "\001\002\000\030\002\ufffb\005\ufffb\006\ufffb\007\ufffb\012" +
    "\ufffb\013\ufffb\015\ufffb\016\ufffb\020\ufffb\022\ufffb\032\ufffb" +
    "\001\002\000\004\032\121\001\002\000\012\025\037\031" +
    "\034\032\033\033\035\001\002\000\004\032\103\001\002" +
    "\000\004\027\101\001\002\000\004\032\060\001\002\000" +
    "\004\032\032\001\002\000\026\005\ufffe\006\ufffe\007\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\016\ufffe\020\ufffe\022\ufffe\032" +
    "\ufffe\001\002\000\026\005\021\006\026\007\014\012\023" +
    "\013\025\015\031\016\022\020\017\022\015\032\024\001" +
    "\002\000\030\002\ufffa\005\ufffa\006\ufffa\007\ufffa\012\ufffa" +
    "\013\ufffa\015\ufffa\016\ufffa\020\ufffa\022\ufffa\032\ufffa\001" +
    "\002\000\014\014\uffe5\025\037\031\034\032\033\033\035" +
    "\001\002\000\026\004\uffe4\014\uffe4\021\uffe4\023\uffde\024" +
    "\uffde\025\uffe4\026\uffde\031\uffe4\032\uffe4\033\uffe4\001\002" +
    "\000\026\004\uffdf\014\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\031\uffdf\032\uffdf\033\uffdf\001\002\000\020" +
    "\004\uffe3\014\uffe3\021\uffe3\025\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\001\002\000\026\004\uffe2\014\uffe2\021\uffe2\023\051" +
    "\024\050\025\052\026\053\031\uffe2\032\uffe2\033\uffe2\001" +
    "\002\000\010\025\037\031\034\032\046\001\002\000\014" +
    "\014\uffe5\025\037\031\034\032\033\033\035\001\002\000" +
    "\004\014\042\001\002\000\006\015\uffe1\034\uffe1\001\002" +
    "\000\006\015\045\034\044\001\002\000\006\015\uffe0\034" +
    "\uffe0\001\002\000\004\004\uffeb\001\002\000\026\004\uffde" +
    "\014\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026\uffde\031" +
    "\uffde\032\uffde\033\uffde\001\002\000\026\004\uffd9\014\uffd9" +
    "\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\001\002\000\010\025\037\031\034\032\046" +
    "\001\002\000\010\025\037\031\034\032\046\001\002\000" +
    "\010\025\037\031\034\032\046\001\002\000\010\025\037" +
    "\031\034\032\046\001\002\000\026\004\uffda\014\uffda\021" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\031\uffda\032\uffda" +
    "\033\uffda\001\002\000\026\004\uffdc\014\uffdc\021\uffdc\023" +
    "\uffdc\024\050\025\uffdc\026\053\031\uffdc\032\uffdc\033\uffdc" +
    "\001\002\000\026\004\uffdd\014\uffdd\021\uffdd\023\uffdd\024" +
    "\050\025\uffdd\026\053\031\uffdd\032\uffdd\033\uffdd\001\002" +
    "\000\026\004\uffdb\014\uffdb\021\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\031\uffdb\032\uffdb\033\uffdb\001\002\000\004" +
    "\032\061\001\002\000\014\021\uffe5\025\037\031\034\032" +
    "\033\033\035\001\002\000\014\021\uffe5\025\037\031\034" +
    "\032\033\033\035\001\002\000\004\021\064\001\002\000" +
    "\012\021\uffe9\025\uffe9\031\uffe9\032\uffe9\001\002\000\012" +
    "\021\066\025\037\031\034\032\046\001\002\000\004\021" +
    "\070\001\002\000\020\021\uffe8\023\051\024\050\025\052" +
    "\026\053\031\uffe8\032\uffe8\001\002\000\012\021\uffe9\025" +
    "\uffe9\031\uffe9\032\uffe9\001\002\000\012\021\072\025\037" +
    "\031\034\032\046\001\002\000\010\025\037\031\034\032" +
    "\046\001\002\000\022\004\uffe5\023\051\024\050\025\074" +
    "\026\053\031\034\032\033\033\035\001\002\000\010\025" +
    "\037\031\034\032\046\001\002\000\014\004\uffe5\025\037" +
    "\031\034\032\033\033\035\001\002\000\014\004\uffec\023" +
    "\051\024\050\025\052\026\053\001\002\000\004\004\uffed" +
    "\001\002\000\024\004\uffdc\021\uffd9\023\uffdc\024\050\025" +
    "\uffdc\026\053\031\uffdc\032\uffdc\033\uffdc\001\002\000\010" +
    "\025\037\031\034\032\046\001\002\000\014\004\uffea\023" +
    "\051\024\050\025\052\026\053\001\002\000\010\025\037" +
    "\031\034\032\046\001\002\000\016\023\051\024\050\025" +
    "\074\026\053\031\034\032\046\001\002\000\016\023\051" +
    "\024\050\025\074\026\053\031\034\032\046\001\002\000" +
    "\022\004\uffe5\023\051\024\050\025\074\026\053\031\034" +
    "\032\033\033\035\001\002\000\004\004\ufff2\001\002\000" +
    "\012\025\037\031\034\032\033\033\035\001\002\000\010" +
    "\025\037\031\034\032\046\001\002\000\014\021\113\023" +
    "\051\024\050\025\052\026\053\001\002\000\014\021\uffe7" +
    "\025\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002\000\014\021" +
    "\115\025\037\031\034\032\033\033\035\001\002\000\004" +
    "\014\117\001\002\000\014\021\uffe6\025\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\001\002\000\026\005\ufff8\006\ufff8\007\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\016\ufff8\020\ufff8\022\ufff8\032" +
    "\ufff8\001\002\000\026\005\ufff9\006\ufff9\007\ufff9\012\ufff9" +
    "\013\ufff9\015\ufff9\016\ufff9\020\ufff9\022\ufff9\032\ufff9\001" +
    "\002\000\010\025\037\031\034\032\046\001\002\000\016" +
    "\023\051\024\050\025\074\026\053\031\034\032\046\001" +
    "\002\000\016\023\051\024\050\025\074\026\053\031\034" +
    "\032\046\001\002\000\016\023\051\024\050\025\074\026" +
    "\053\031\034\032\046\001\002\000\022\004\uffe5\023\051" +
    "\024\050\025\074\026\053\031\034\032\033\033\035\001" +
    "\002\000\004\004\uffef\001\002\000\010\025\037\031\034" +
    "\032\046\001\002\000\016\023\051\024\050\025\074\026" +
    "\053\031\034\032\046\001\002\000\014\021\132\023\051" +
    "\024\050\025\052\026\053\001\002\000\014\021\uffe7\025" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002\000\014\021\134" +
    "\025\037\031\034\032\033\033\035\001\002\000\004\004" +
    "\ufff0\001\002\000\030\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\012\ufffc\013\ufffc\015\ufffc\016\ufffc\020\ufffc\022\ufffc\032" +
    "\ufffc\001\002\000\004\032\137\001\002\000\012\025\037" +
    "\031\034\032\033\033\035\001\002\000\012\025\037\031" +
    "\034\032\033\033\035\001\002\000\012\025\037\031\034" +
    "\032\033\033\035\001\002\000\010\025\037\031\034\032" +
    "\046\001\002\000\022\004\uffe5\023\051\024\050\025\074" +
    "\026\053\031\034\032\033\033\035\001\002\000\014\004" +
    "\uffe5\025\037\031\034\032\033\033\035\001\002\000\004" +
    "\004\uffee\001\002\000\016\023\uffde\024\uffde\025\037\026" +
    "\uffde\031\034\032\046\001\002\000\016\023\051\024\050" +
    "\025\074\026\053\031\034\032\046\001\002\000\016\023" +
    "\051\024\050\025\074\026\053\031\034\032\046\001\002" +
    "\000\016\023\051\024\050\025\074\026\053\031\034\032" +
    "\046\001\002\000\022\004\uffe5\023\051\024\050\025\074" +
    "\026\053\031\034\032\033\033\035\001\002\000\004\004" +
    "\ufff5\001\002\000\016\023\051\024\050\025\074\026\053" +
    "\031\034\032\046\001\002\000\016\023\051\024\050\025" +
    "\074\026\053\031\034\032\046\001\002\000\016\023\051" +
    "\024\050\025\074\026\053\031\034\032\046\001\002\000" +
    "\022\004\uffe5\023\051\024\050\025\074\026\053\031\034" +
    "\032\033\033\035\001\002\000\014\004\ufff4\025\037\031" +
    "\034\032\033\033\035\001\002\000\004\004\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\010\004\016\003\001\001\000\004\011" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\017\012\012\013\015\015\026\001\001\000\002\001\001" +
    "\000\004\017\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\107\017\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\027\001\001\000\012\006\017\012\012\013\015\015" +
    "\026\001\001\000\002\001\001\000\006\003\037\017\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\046\001\001\000\006" +
    "\003\040\017\035\001\001\000\002\001\001\000\004\002" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\056\001\001\000\004\017\055\001\001\000\004\017\054" +
    "\001\001\000\004\017\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\061\017\035\001\001\000\006\003" +
    "\062\017\035\001\001\000\002\001\001\000\004\005\064" +
    "\001\001\000\004\017\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\070\001\001\000\004\017\066" +
    "\001\001\000\004\017\072\001\001\000\006\003\074\017" +
    "\035\001\001\000\004\017\077\001\001\000\006\003\076" +
    "\017\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\101\001\001\000\002\001\001" +
    "\000\004\017\103\001\001\000\004\017\104\001\001\000" +
    "\004\017\105\001\001\000\006\003\106\017\035\001\001" +
    "\000\002\001\001\000\006\003\110\017\035\001\001\000" +
    "\004\017\111\001\001\000\002\001\001\000\004\004\113" +
    "\001\001\000\006\003\115\017\035\001\001\000\004\014" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\121\001\001\000\004\017\122\001" +
    "\001\000\004\017\123\001\001\000\004\017\124\001\001" +
    "\000\006\003\125\017\035\001\001\000\002\001\001\000" +
    "\004\017\127\001\001\000\004\017\130\001\001\000\002" +
    "\001\001\000\004\004\132\001\001\000\006\003\115\017" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\137\017\035\001\001\000\006\003" +
    "\140\017\035\001\001\000\006\003\141\017\035\001\001" +
    "\000\004\017\142\001\001\000\006\003\143\017\035\001" +
    "\001\000\006\003\144\017\035\001\001\000\002\001\001" +
    "\000\004\017\153\001\001\000\004\017\147\001\001\000" +
    "\004\017\150\001\001\000\004\017\151\001\001\000\006" +
    "\003\152\017\035\001\001\000\002\001\001\000\004\017" +
    "\154\001\001\000\004\017\155\001\001\000\004\017\156" +
    "\001\001\000\006\003\157\017\035\001\001\000\006\003" +
    "\160\017\035\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
    
    private Context context;
    public void setContext (Context context) {
    	this.context = context;
    }

    public Context getContext () {
		return context;
    }

	public Factory getFactory () {
		return getContext().getFactory();
	}



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= MINUS Expression 
            {
              ENode RESULT =null;
		ENode v = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createMinusENode (v); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression DIV Expression 
            {
              ENode RESULT =null;
		ENode l = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createDivENode (l, r); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression MULT Expression 
            {
              ENode RESULT =null;
		ENode l = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createMultENode (l, r); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression MINUS Expression 
            {
              ENode RESULT =null;
		ENode l = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createSubENode (l, r); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression PLUS Expression 
            {
              ENode RESULT =null;
		ENode l = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createAddENode (l, r); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= ID 
            {
              ENode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 VarENode var = getFactory().createVarENode(id);
								 var.setValue(getContext().getSymMap().get(id));
								 RESULT = var; 
							 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= INTEGER 
            {
              ENode RESULT =null;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createValueENode(v); 
              CUP_result = getSymbolFactory().newSymbol("Expression",13, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // myPoints ::= myPoints POINT 
            {
              String RESULT =null;
		String myp = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String p = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT= myp + " " + p; 
              CUP_result = getSymbolFactory().newSymbol("myPoints",0, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // myPoints ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP_result = getSymbolFactory().newSymbol("myPoints",0, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // myWord ::= Expression 
            {
              String RESULT =null;
		ENode e = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT= new Integer(e.getValue()).toString();
              CUP_result = getSymbolFactory().newSymbol("myWord",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // myWord ::= WORD 
            {
              String RESULT =null;
		String wrd = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		  RESULT=wrd; 
              CUP_result = getSymbolFactory().newSymbol("myWord",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // myWord ::= ID 
            {
              String RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 
					if (getContext().getSymMap().get(id)!=null){
						RESULT = new Integer(getContext().getSymMap().get(id)).toString();
					}
					else RESULT=id;
  				
              CUP_result = getSymbolFactory().newSymbol("myWord",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // myWord ::= 
            {
              String RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("myWord",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // myWords ::= myWords myWord 
            {
              String RESULT =null;
		String my = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String w = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		RESULT = my +" "+ w ;
              CUP_result = getSymbolFactory().newSymbol("myWords",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // myWords ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP_result = getSymbolFactory().newSymbol("myWords",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Numbers ::= Numbers Expression 
            {
              String RESULT =null;
		String nums = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		ENode e = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		RESULT = nums +" "+ e.getValue() ;
              CUP_result = getSymbolFactory().newSymbol("Numbers",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Numbers ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP_result = getSymbolFactory().newSymbol("Numbers",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Instruction ::= ID EQUAL Expression 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode v = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 
				 	getContext().getSymMap().put(id, v.getValue());
				 
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Instruction ::= MAKEPOLYGON ID myWord myWord CONTAINERSTART myPoints CONTAINERSTOP 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String transf = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String pts = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
			
					RESULT =  getFactory().createNamedPolygonNode(id,pts,color, transf);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Instruction ::= MAKEANIMATETRANSFORM ID ID myWord myWord QUOTE Numbers QUOTE QUOTE Numbers QUOTE Expression myWord Expression 
            {
              SVGNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-12)).value;
		String on = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-11)).value;
		String attribut = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-10)).value;
		String type = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-9)).value;
		String from = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-7)).value;
		String to = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode duree = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		String begin = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		ENode repeatCount = (ENode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		
					RESULT =  getFactory().createNamedAnimateTransform(name,on,attribut,type,from,to, duree.getValue(),begin,(new Integer(repeatCount.getValue())).toString());
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Instruction ::= MAKEANIMATETRANSFORM ID ID myWord myWord QUOTE Numbers QUOTE QUOTE Numbers QUOTE Expression myWord myWord 
            {
              SVGNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-12)).value;
		String on = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-11)).value;
		String attribut = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-10)).value;
		String type = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-9)).value;
		String from = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-7)).value;
		String to = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode duree = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		String begin = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String repeatCount = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		
					RESULT =  getFactory().createNamedAnimateTransform(name,on,attribut,type,from,to, duree.getValue(),begin,repeatCount);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Instruction ::= MAKEANIMATION ID ID myWord myWord myWord Expression myWord myWord 
            {
              SVGNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-7)).value;
		String on = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-6)).value;
		String attribut = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		String from = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String to = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode duree = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		String begin = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String actionAtEnd = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		
					RESULT =  getFactory().createNamedAnimation(name,on,attribut,from,to, duree.getValue(),begin,actionAtEnd);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Instruction ::= MAKELINE ID Expression Expression Expression Expression myWord 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		ENode x1 = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode y1 = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode x2 = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode y2 = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 
					getFactory().createNamedLineNode(id, x1.getValue(),y1.getValue(), x2.getValue(),y2.getValue(),  color); 
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Instruction ::= MAKETEXT ID Expression Expression QUOTE myWords QUOTE 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		ENode x = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode y = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		String text = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		
					RESULT =  getFactory().createNamedTextNode(id,x.getValue(),y.getValue(), text);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruction ::= MAKECIRCLE ID Expression Expression Expression myWord 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode cx = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode cy = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
			
					RESULT =  getFactory().createCircleNode(cx.getValue(),cy.getValue(), r.getValue(),  color);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruction ::= MAKECIRCLE ID Expression Expression Expression myWord 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode cx = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode cy = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode r = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
			
					RESULT =  getFactory().createNamedCircleNode(id,cx.getValue(),cy.getValue(), r.getValue(),  color);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruction ::= MAKERECT ID Expression Expression Expression Expression myWord myWord 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-6)).value;
		ENode x = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		ENode y = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode width = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode length = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String transf = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
			
					RESULT =  getFactory().createNamedRectangleNode(id,x.getValue(),y.getValue(), width.getValue(), length.getValue(), color,transf);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruction ::= MAKERECT ID Expression Expression Expression Expression myWord 
            {
              SVGNode RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		ENode x = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode y = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode width = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode length = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
			
					RESULT =  getFactory().createNamedRectangleNode(id,x.getValue(),y.getValue(), width.getValue(), length.getValue(), color,null);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruction ::= MAKERECT Expression Expression Expression Expression myWord 
            {
              SVGNode RESULT =null;
		ENode x = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		ENode y = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		ENode width = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		ENode length = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		String color = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
			
					RESULT =  getFactory().createRectangleNode(x.getValue(),y.getValue(), width.getValue(), length.getValue(), color);
				
              CUP_result = getSymbolFactory().newSymbol("Instruction",9, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instructions ::= Instructions Instruction TERM 
            {
              SVGNode RESULT =null;
		SVGNode l = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		 RESULT =l; 
              CUP_result = getSymbolFactory().newSymbol("Instructions",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instructions ::= 
            {
              SVGNode RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Instructions",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ContainerStart ::= CONTAINERSTART 
            {
              SVGNode RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("ContainerStart",10, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Makecont ::= MAKECONT myWord myWord Expression QUOTE myWords QUOTE ContainerStart 
            {
              SVGNode RESULT =null;
		String name = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-6)).value;
		String colorStroke = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-5)).value;
		ENode strokeWidth = (ENode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String transform = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		SVGNode cs = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		  
					ContainerSVGNode container = getFactory().createContainerNode(name, colorStroke,strokeWidth.getValue(), transform);
					getContext().setCurrentParent(container);
					RESULT = container;
				
              CUP_result = getSymbolFactory().newSymbol("Makecont",11, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Container ::= Makecont Definitions CONTAINERSTOP 
            {
              SVGNode RESULT =null;
		SVGNode mc = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		RESULT = mc;
              CUP_result = getSymbolFactory().newSymbol("Container",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Definition ::= Container 
            {
              SVGNode RESULT =null;
		SVGNode cont = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 	
				 getContext().setCurrentParent(getContext().getCurrentParent().getParent());
				 RESULT = cont ;
			    
              CUP_result = getSymbolFactory().newSymbol("Definition",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Definition ::= Instruction TERM 
            {
              SVGNode RESULT =null;
		SVGNode inst = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = inst; 
              CUP_result = getSymbolFactory().newSymbol("Definition",8, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Definitions ::= Definitions Definition 
            {
              SVGNode RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Definitions ::= 
            {
              SVGNode RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",7, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SetFrame ::= FRAME INTEGER INTEGER 
            {
              Object RESULT =null;
		Integer width = (Integer)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Integer length = (Integer)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		
				  RacineSVGNode raci = getFactory().createRacineNode(width, length); 
				  getContext().setRacine(raci);
			     
              CUP_result = getSymbolFactory().newSymbol("SetFrame",12, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Commandes EOF 
            {
              Object RESULT =null;
		SVGNode start_val = (SVGNode)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Commandes ::= SetFrame Definitions 
            {
              SVGNode RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Commandes",6, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
